#!/usr/bin/python3

import sys
import os
import os.path
import shutil

# directory to be packaged
TOPDIR="debian"
# directory with control and other deb file
DEB_DIR="DEBIAN"
# current working directory
path="."
# input (templates) and output
in_dir = os.path.join(path, DEB_DIR)
out_dir = os.path.join(path, TOPDIR, DEB_DIR)

topdir = os.path.join(path, TOPDIR)

def help():
    print("")
    print("Command takes control (and other files) from DEBIAN directory")
    print("and packages up everything that is in debian directory.")
    print("Command has to be run in the directory that contains these.")
    print("Usage:")
    print("oh-deb-build <version>")

def validate():
    if not os.path.exists(topdir) and not os.path.isdir(topdir):
        print("Directory {} cannot be found. Nothing to package.".format(topdir))
        sys.exit(1)
    if not os.path.exists(in_dir) and not os.path.isdir(in_dir):
        print("Directory {} cannot be found. Cannot create debian files.".format(in_dir))
        sys.exit(1)
    if os.path.exists(out_dir):
        shutil.rmtree(out_dir)
    os.mkdir(out_dir)

def get_version():
    ''' returns version supplied on command line '''
    try:
        return sys.argv[1]
    except IndexError as e:
        help()
        sys.exit(1)

def get_control_fields(control):
    ''' Searches control file and matches lines that do NOT start with as
        white space and contain semicolon. First part (before semicolon)
        is a key and second part (after semicolon) is a value. This is then
        returned as dict '''
    meta = {}
    with open(control, "r") as inp:
        last_key = None
        for line in inp:
            # line does not start with white space and contains colon
            if line == line.lstrip() and ":" in line:
                x = line.split(":", 1)
                last_key = x[0].strip()
                meta[last_key] = x[1].strip()
            # line starts with whitespace, still value of the previous key
            if line != line.lstrip():
                meta[last_key] = " ".join([meta[last_key], line.strip()])
    return meta

def copy_replace(control_fields, src_path, dst_path):
    ''' converts key from supplied control_fields to upper case and places it
        inside ${}, Version becomes ${VERSION}. This is then searched in the
        file and replaced for value. '''
    fields = {"${{{}}}".format(k.upper()): control_fields[k] for k in control_fields}
    with open(src_path, "r") as inp, open(dst_path, "w") as out:
        for line in inp:
            for pattern in fields:
                if pattern in line:
                    line = line.replace(pattern, fields[pattern])
            out.write(line)

def copy_replace_control(version, control_template, control):
    ''' copies template and replace version '''
    pattern = "${VERSION}"
    with open(control_template, "r") as inp, open(control, "w") as out:
        for line in inp:
            if pattern in line:
                line = line.replace(pattern, version)
            out.write(line)

def get_filenames(directory):
    ''' returns only filenames (first level) of the supplied directory '''
    return [ f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f)) ]

if __name__ == '__main__':

    validate()

    # create control file from template and replace supplied version
    control_template = os.path.join(in_dir, "control")
    control = os.path.join(out_dir, "control")
    copy_replace_control(get_version(), control_template, control)

    control_fields = get_control_fields(control)
    # get only files (templates) from DEB_DIR
    filenames = get_filenames(in_dir)
    try:
        for filename in filenames:
            in_path = os.path.join(in_dir, filename)
            out_path = os.path.join(out_dir, filename)
            if filename != 'control':   # control has already been done
                copy_replace(control_fields, in_path, out_path)
    except IOError as e:
        print(str(e))
        sys.exit(1)

    # final package name
    package = control_fields['Package']
    version = control_fields['Version']
    architecture = control_fields['Architecture']
    package_name = "{}_{}_{}.deb".format(package, version, architecture)

    # build package
    os.system("find {} -type f | xargs chmod 755".format(out_dir))
    os.system("fakeroot dpkg-deb --build ./debian {} > /dev/null".format(package_name))
